#pragma GCC diagnostic ignored "-Wdouble-promotion"
#pragma GCC optimize("no-single-precision-constant")
#pragma GCC optimize("O3")

#include <iostream>
#include "InertialNavigationEstimator.h"
#include "geodesy.h"
#include <math.h>
#include <limits>

using namespace std;
using namespace Eigen;

void InertialNavigationEstimator::Mixand::pos_origin_changed(const Vector3f& position_origin_delta) {
    x.block<3,1>(STATE_IDX_POS0,0) -= position_origin_delta;
}

void InertialNavigationEstimator::Mixand::initialize(const Vector3f& init_accel_vec, const Vector3f& vel_ecef, float yaw_angle, float yaw_sigma) {
    quat.setIdentity();
    x.setZero();
    P.setZero();
    auto rot_err_cov = P.topLeftCorner<3,3>();

    float accel_sigma = 1;
    initial_heading = yaw_angle;

    const auto& pos_ecef = ecef_origin;

    const auto& lat = lla_origin(0);
    const auto& lon = lla_origin(1);


    { //////// Begin generated code: Attitude covariance initialization ////////
        float subx0 = (1.0f/2.0f)*atan2f(-init_accel_vec(1), -init_accel_vec(2));
        float subx1 = (1.0f/2.0f)*yaw_angle;
        float subx2 = ((init_accel_vec(0))*(init_accel_vec(0)));
        float subx3 = ((init_accel_vec(1))*(init_accel_vec(1))) + ((init_accel_vec(2))*(init_accel_vec(2)));
        float subx4 = (1.0f/2.0f)*asinf(init_accel_vec(0)/sqrtf(subx2 + subx3));
        float subx5 = cosf(subx0)*cosf(subx1)*cosf(subx4);
        float subx6 = sinf(subx0)*sinf(subx1)*sinf(subx4);
        float subx7 = 0.5*lat;
        float subx8 = (1.0f/2.0f)*sqrtf(2)*cosf(0.5*lon);
        float subx9 = -subx8*sinf(subx7) + subx8*cosf(subx7);
        float subx10 = sinf(subx0)*cosf(subx1)*cosf(subx4);
        float subx11 = sinf(subx1)*sinf(subx4)*cosf(subx0);
        float subx12 = (1.0f/2.0f)*sqrtf(2)*sinf(0.5*lon);
        float subx13 = subx12*sinf(subx7) + subx12*cosf(subx7);
        float subx14 = sinf(subx4)*cosf(subx0)*cosf(subx1);
        float subx15 = sinf(subx0)*sinf(subx1)*cosf(subx4);
        float subx16 = -subx8*sinf(subx7) - subx8*cosf(subx7);
        float subx17 = sinf(subx1)*cosf(subx0)*cosf(subx4);
        float subx18 = sinf(subx0)*sinf(subx4)*cosf(subx1);
        float subx19 = -subx12*sinf(subx7) + subx12*cosf(subx7);
        float subx20 = -subx13*(subx10 - subx11) - subx16*(subx14 + subx15) - subx19*(subx17 - subx18) + subx9*(subx5 + subx6);
        float subx21 = subx13*(subx5 + subx6) + subx16*(subx17 - subx18) - subx19*(subx14 + subx15) + subx9*(subx10 - subx11);
        float subx22 = -subx13*(subx17 - subx18) + subx16*(subx5 + subx6) + subx19*(subx10 - subx11) + subx9*(subx14 + subx15);
        float subx23 = subx13*(subx14 + subx15) - subx16*(subx10 - subx11) + subx19*(subx5 + subx6) + subx9*(subx17 - subx18);
        float subx24 = ((accel_sigma)*(accel_sigma));
        float subx25 = (1.0f/2.0f)*subx18;
        float subx26 = 1/(sqrtf(-subx2/(subx2 + subx3) + 1));
        float subx27 = 1/(powf(subx2 + subx3, 3.0f/2.0f));
        float subx28 = subx26*(-subx2*subx27 + 1/(sqrtf(subx2 + subx3)));
        float subx29 = (1.0f/2.0f)*subx17;
        float subx30 = (1.0f/2.0f)*subx15;
        float subx31 = (1.0f/2.0f)*subx14;
        float subx32 = subx28*subx30 - subx28*subx31;
        float subx33 = (1.0f/2.0f)*subx6;
        float subx34 = (1.0f/2.0f)*subx5;
        float subx35 = (1.0f/2.0f)*subx10;
        float subx36 = (1.0f/2.0f)*subx11;
        float subx37 = subx13*subx32 + subx16*(-subx28*subx35 - subx28*subx36) + subx19*(subx28*subx33 - subx28*subx34) + subx9*(-subx25*subx28 - subx28*subx29);
        float subx38 = init_accel_vec(2)/subx3;
        float subx39 = init_accel_vec(0)*init_accel_vec(1)*subx26*subx27;
        float subx40 = -subx30*subx39 + subx31*subx39 - subx35*subx38 + subx36*subx38;
        float subx41 = subx13*subx40 + subx16*(-subx30*subx38 - subx31*subx38 + subx35*subx39 + subx36*subx39) + subx19*(subx25*subx38 - subx29*subx38 - subx33*subx39 + subx34*subx39) + subx9*(subx25*subx39 + subx29*subx39 + subx33*subx38 + subx34*subx38);
        float subx42 = init_accel_vec(1)/subx3;
        float subx43 = init_accel_vec(0)*init_accel_vec(2)*subx26*subx27;
        float subx44 = -subx30*subx43 + subx31*subx43 + subx35*subx42 - subx36*subx42;
        float subx45 = subx13*subx44 + subx16*(subx30*subx42 + subx31*subx42 + subx35*subx43 + subx36*subx43) + subx19*(-subx25*subx42 + subx29*subx42 - subx33*subx43 + subx34*subx43) + subx9*(subx25*subx43 + subx29*subx43 - subx33*subx42 - subx34*subx42);
        float subx46 = ((yaw_sigma)*(yaw_sigma));
        float subx47 = subx13*(subx25 - subx29) + subx16*(subx33 + subx34) + subx19*(-subx35 + subx36) + subx9*(-subx30 - subx31);
        float subx48 = subx24*((subx37)*(subx37)) + subx24*((subx41)*(subx41)) + subx24*((subx45)*(subx45)) + subx46*((subx47)*(subx47));
        float subx49 = 1/(((subx20)*(subx20)) + ((subx21)*(subx21)) + ((subx22)*(subx22)) + ((subx23)*(subx23)));
        float subx50 = subx20*subx49;
        float subx51 = subx13*(subx28*subx35 + subx28*subx36) + subx16*subx32 + subx19*(-subx25*subx28 - subx28*subx29) + subx9*(-subx28*subx33 + subx28*subx34);
        float subx52 = -subx30*subx42 - subx31*subx42 - subx35*subx43 - subx36*subx43;
        float subx53 = subx13*subx52 + subx16*subx44 + subx19*(subx25*subx43 + subx29*subx43 - subx33*subx42 - subx34*subx42) + subx9*(subx25*subx42 - subx29*subx42 + subx33*subx43 - subx34*subx43);
        float subx54 = subx13*(subx30*subx38 + subx31*subx38 - subx35*subx39 - subx36*subx39) + subx16*subx40 + subx19*(subx25*subx39 + subx29*subx39 + subx33*subx38 + subx34*subx38) + subx9*(-subx25*subx38 + subx29*subx38 + subx33*subx39 - subx34*subx39);
        float subx55 = subx13*(-subx33 - subx34) + subx16*(subx25 - subx29) + subx19*(-subx30 - subx31) + subx9*(subx35 - subx36);
        float subx56 = subx24*subx37*subx51 + subx24*subx41*subx54 + subx24*subx45*subx53 + subx46*subx47*subx55;
        float subx57 = subx23*subx49;
        float subx58 = subx13*(subx25*subx28 + subx28*subx29) + subx16*(subx28*subx33 - subx28*subx34) + subx19*(subx28*subx35 + subx28*subx36) + subx32*subx9;
        float subx59 = subx13*(-subx25*subx43 - subx29*subx43 + subx33*subx42 + subx34*subx42) + subx16*(-subx25*subx42 + subx29*subx42 - subx33*subx43 + subx34*subx43) + subx19*subx52 + subx44*subx9;
        float subx60 = -subx25*subx39 - subx29*subx39 - subx33*subx38 - subx34*subx38;
        float subx61 = subx13*subx60 + subx16*(subx25*subx38 - subx29*subx38 - subx33*subx39 + subx34*subx39) + subx19*(subx30*subx38 + subx31*subx38 - subx35*subx39 - subx36*subx39) + subx40*subx9;
        float subx62 = subx13*(subx30 + subx31) + subx16*(-subx35 + subx36) + subx19*(-subx33 - subx34) + subx9*(subx25 - subx29);
        float subx63 = subx24*subx37*subx58 + subx24*subx41*subx61 + subx24*subx45*subx59 + subx46*subx47*subx62;
        float subx64 = subx21*subx49;
        float subx65 = subx13*(-subx28*subx33 + subx28*subx34) + subx16*(subx25*subx28 + subx28*subx29) + subx19*subx32 + subx9*(-subx28*subx35 - subx28*subx36);
        float subx66 = subx13*(subx25*subx42 - subx29*subx42 + subx33*subx43 - subx34*subx43) + subx16*(-subx25*subx43 - subx29*subx43 + subx33*subx42 + subx34*subx42) + subx19*subx44 + subx9*(subx30*subx42 + subx31*subx42 + subx35*subx43 + subx36*subx43);
        float subx67 = subx13*(-subx25*subx38 + subx29*subx38 + subx33*subx39 - subx34*subx39) + subx16*subx60 + subx19*subx40 + subx9*(-subx30*subx38 - subx31*subx38 + subx35*subx39 + subx36*subx39);
        float subx68 = subx13*(subx35 - subx36) + subx16*(subx30 + subx31) + subx19*(subx25 - subx29) + subx9*(subx33 + subx34);
        float subx69 = subx24*subx37*subx65 + subx24*subx41*subx67 + subx24*subx45*subx66 + subx46*subx47*subx68;
        float subx70 = subx22*subx49;
        float subx71 = subx48*subx50 + subx56*subx57 - subx63*subx64 - subx69*subx70;
        float subx72 = subx24*((subx51)*(subx51)) + subx24*((subx53)*(subx53)) + subx24*((subx54)*(subx54)) + subx46*((subx55)*(subx55));
        float subx73 = subx24*subx51*subx58 + subx24*subx53*subx59 + subx24*subx54*subx61 + subx46*subx55*subx62;
        float subx74 = subx24*subx51*subx65 + subx24*subx53*subx66 + subx24*subx54*subx67 + subx46*subx55*subx68;
        float subx75 = subx50*subx56 + subx57*subx72 - subx64*subx73 - subx70*subx74;
        float subx76 = subx24*((subx58)*(subx58)) + subx24*((subx59)*(subx59)) + subx24*((subx61)*(subx61)) + subx46*((subx62)*(subx62));
        float subx77 = subx24*subx58*subx65 + subx24*subx59*subx66 + subx24*subx61*subx67 + subx46*subx62*subx68;
        float subx78 = subx50*subx63 + subx57*subx73 - subx64*subx76 - subx70*subx77;
        float subx79 = subx24*((subx65)*(subx65)) + subx24*((subx66)*(subx66)) + subx24*((subx67)*(subx67)) + subx46*((subx68)*(subx68));
        float subx80 = subx50*subx69 + subx57*subx74 - subx64*subx77 - subx70*subx79;
        float subx81 = -subx48*subx57 + subx50*subx56 - subx63*subx70 + subx64*subx69;
        float subx82 = subx50*subx72 - subx56*subx57 + subx64*subx74 - subx70*subx73;
        float subx83 = subx50*subx73 - subx57*subx63 + subx64*subx77 - subx70*subx76;
        float subx84 = subx50*subx74 - subx57*subx69 + subx64*subx79 - subx70*subx77;
        float subx85 = subx48*subx70 + subx50*subx69 - subx56*subx64 - subx57*subx63;
        float subx86 = subx50*subx74 + subx56*subx70 - subx57*subx73 - subx64*subx72;
        float subx87 = subx50*subx77 - subx57*subx76 + subx63*subx70 - subx64*subx73;
        float subx88 = subx50*subx79 - subx57*subx77 - subx64*subx74 + subx69*subx70;

        quat.w() = subx20;
        quat.x() = subx21;
        quat.y() = subx22;
        quat.z() = subx23;

        rot_err_cov(0,0) = subx50*subx71 + subx57*subx75 - subx64*subx78 - subx70*subx80;
        rot_err_cov(0,1) = subx50*subx75 - subx57*subx71 + subx64*subx80 - subx70*subx78;
        rot_err_cov(0,2) = subx50*subx80 - subx57*subx78 - subx64*subx75 + subx70*subx71;
        rot_err_cov(1,0) = subx50*subx81 + subx57*subx82 - subx64*subx83 - subx70*subx84;
        rot_err_cov(1,1) = subx50*subx82 - subx57*subx81 + subx64*subx84 - subx70*subx83;
        rot_err_cov(1,2) = subx50*subx84 - subx57*subx83 - subx64*subx82 + subx70*subx81;
        rot_err_cov(2,0) = subx50*subx85 + subx57*subx86 - subx64*subx87 - subx70*subx88;
        rot_err_cov(2,1) = subx50*subx86 - subx57*subx85 + subx64*subx88 - subx70*subx87;
        rot_err_cov(2,2) = subx50*subx88 - subx57*subx87 - subx64*subx86 + subx70*subx85;
    } //////// End generated code: Attitude covariance initialization   ////////

    for (uint8_t i=0; i<3; i++) {
        x(STATE_IDX_VEL0+i) = vel_ecef(i);
        P(STATE_IDX_POS0+i,STATE_IDX_POS0+i) = SQ(2);
        P(STATE_IDX_VEL0+i,STATE_IDX_VEL0+i) = SQ(1);
        P(STATE_IDX_GBIAS0+i,STATE_IDX_GBIAS0+i) = SQ(0.2);
        P(STATE_IDX_GSCALE0+i,STATE_IDX_GSCALE0+i) = SQ(0.01);
        P(STATE_IDX_ABIAS0+i,STATE_IDX_ABIAS0+i) = SQ(1);
    }
}

void InertialNavigationEstimator::Mixand::get_state_and_covariance_different_quat(const Quaternion& new_quat, MatrixSx1& x_ret, MatrixSxS& P_ret) {
    x_ret.block<N_STATES-3,1>(3,0) = x.block<N_STATES-3,1>(3,0);

    MatrixSxS F = MatrixSxS::Identity();

    {
        float subx0 = 1/(new_quat.w()*quat.w() + new_quat.x()*quat.x() + new_quat.y()*quat.y() + new_quat.z()*quat.z());
        float subx1 = subx0*(-new_quat.w()*quat.x() + new_quat.x()*quat.w() + new_quat.y()*quat.z() - new_quat.z()*quat.y());
        float subx2 = subx0*(-new_quat.w()*quat.y() - new_quat.x()*quat.z() + new_quat.y()*quat.w() + new_quat.z()*quat.x());
        float subx3 = subx0*(-new_quat.w()*quat.z() + new_quat.x()*quat.y() - new_quat.y()*quat.x() + new_quat.z()*quat.w());
        float subx4 = subx1*x(STATE_IDX_ROT_ERR0) + subx2*x(STATE_IDX_ROT_ERR1) + subx3*x(STATE_IDX_ROT_ERR2) + 1;
        float subx5 = 1/(subx4);
        float subx6 = subx2*x(STATE_IDX_ROT_ERR2) - subx3*x(STATE_IDX_ROT_ERR1);
        float subx7 = -subx1*x(STATE_IDX_ROT_ERR2) + subx3*x(STATE_IDX_ROT_ERR0);
        float subx8 = subx1*x(STATE_IDX_ROT_ERR1) - subx2*x(STATE_IDX_ROT_ERR0);
        float subx9 = 1/(((subx4)*(subx4)));
        x_ret(0) = -subx1 - subx5*subx6 + x(STATE_IDX_ROT_ERR0);
        x_ret(1) = -subx2 - subx5*subx7 + x(STATE_IDX_ROT_ERR1);
        x_ret(2) = -subx3 - subx5*subx8 + x(STATE_IDX_ROT_ERR2);
        F(0,0) = subx1*subx6*subx9 + 1;
        F(0,1) = subx2*subx6*subx9 + subx3*subx5;
        F(0,2) = -subx2*subx5 + subx3*subx6*subx9;
        F(1,0) = subx1*subx7*subx9 - subx3*subx5;
        F(1,1) = subx2*subx7*subx9 + 1;
        F(1,2) = subx1*subx5 + subx3*subx7*subx9;
        F(2,0) = subx1*subx8*subx9 + subx2*subx5;
        F(2,1) = -subx1*subx5 + subx2*subx8*subx9;
        F(2,2) = subx3*subx8*subx9 + 1;
    }

    P_ret = F*P*F.transpose();
}

void InertialNavigationEstimator::Mixand::stage_predict(float imu_dt, const Vector3f& del_ang, const Vector3f& del_vel) {
    float accel_sigma = params.accel_sigma;
    float gyro_sigma = params.gyro_sigma;
    float gscale_pnoise = params.gscale_pnoise;
    float gyro_cross_sigma = 0.0;
    float gbias_pnoise = params.gbias_pnoise;
    float accel_scale_sigma = 0.0;
    float accel_cross_sigma = 0.0;
    float abias_pnoise_xy = params.abias_pnoise_xy;
    float abias_pnoise_z = params.abias_pnoise_z;

    { //////// Begin generated code: Prediction model      ////////
        float subx0 = del_ang(0)*(x(STATE_IDX_GSCALE0) + 1);
        float subx1 = quat.x()*quat.z();
        float subx2 = imu_dt*(-0.00014584231800000001f*quat.w()*quat.y() + 0.00014584231800000001f*subx1);
        float subx3 = -imu_dt*x(STATE_IDX_GBIAS0) + subx0 - subx2;
        float subx4 = del_ang(1)*(x(STATE_IDX_GSCALE1) + 1);
        float subx5 = quat.y()*quat.z();
        float subx6 = imu_dt*(0.00014584231800000001f*quat.w()*quat.x() + 0.00014584231800000001f*subx5);
        float subx7 = -imu_dt*x(STATE_IDX_GBIAS1) + subx4 - subx6;
        float subx8 = del_ang(2)*(x(STATE_IDX_GSCALE2) + 1);
        float subx9 = ((quat.w())*(quat.w()));
        float subx10 = ((quat.z())*(quat.z()));
        float subx11 = ((quat.x())*(quat.x()));
        float subx12 = ((quat.y())*(quat.y()));
        float subx13 = imu_dt*(7.2921159000000004e-5f*subx10 - 7.2921159000000004e-5f*subx11 - 7.2921159000000004e-5f*subx12 + 7.2921159000000004e-5f*subx9);
        float subx14 = -imu_dt*x(STATE_IDX_GBIAS2) - subx13 + subx8;
        float subx15 = sqrtf(((subx14)*(subx14)) + ((subx3)*(subx3)) + ((subx7)*(subx7)));
        float subx16 = ((subx15 > 0) ? ( 1/(((subx14)*(subx14)) + ((subx3)*(subx3)) + ((subx7)*(subx7))) ) : ( 1 ))*((sinf(0.5f*subx15))*(sinf(0.5f*subx15)))/((cosf(0.5f*subx15))*(cosf(0.5f*subx15)));
        float subx17 = ((subx14)*(subx14))*subx16 + subx16*((subx3)*(subx3)) + subx16*((subx7)*(subx7)) + 1;
        float subx18 = 1/(sqrtf(subx17));
        float subx19 = ((subx15 > 0) ? ( 1/(subx15) ) : ( 1 ))*sinf(0.5f*subx15)/cosf(0.5f*subx15);
        float subx20 = subx19*subx3;
        float subx21 = del_vel(0) - imu_dt*x(STATE_IDX_ABIAS0);
        float subx22 = -subx10 + 1.0f*subx11 - subx12 + subx9;
        float subx23 = del_vel(1) - imu_dt*x(STATE_IDX_ABIAS1);
        float subx24 = quat.x()*quat.y();
        float subx25 = 2.0f*quat.w();
        float subx26 = -quat.z()*subx25 + 2.0f*subx24;
        float subx27 = del_vel(2) - imu_dt*x(STATE_IDX_ABIAS2);
        float subx28 = quat.y()*subx25 + 2.0f*subx1;
        float subx29 = quat.z()*subx25 + 2.0f*subx24;
        float subx30 = -subx10 - subx11 + 1.0f*subx12 + subx9;
        float subx31 = -quat.x()*subx25 + 2.0f*subx5;
        float subx32 = -quat.y()*subx25 + 2.0f*subx1;
        float subx33 = quat.x()*subx25 + 2.0f*subx5;
        float subx34 = 1.0f*subx10 - subx11 - subx12 + subx9;
        float subx35 = -1.0f/2.0f*imu_dt*x(STATE_IDX_GBIAS1) + (1.0f/2.0f)*subx4 - 1.0f/2.0f*subx6;
        float subx36 = ((subx35)*(subx35)) + 1;
        float subx37 = -1.0f/2.0f*imu_dt*x(STATE_IDX_GBIAS0) + (1.0f/2.0f)*subx0 - 1.0f/2.0f*subx2;
        float subx38 = (1.0f/2.0f)*imu_dt;
        float subx39 = (1.0f/2.0f)*imu_dt*x(STATE_IDX_GBIAS2) + (1.0f/2.0f)*subx13 + subx35*subx37 - subx38*(0.00014584231800000001f*subx10 - 0.00014584231800000001f*subx11 - 0.00014584231800000001f*subx12 + 0.00014584231800000001f*subx9) - 1.0f/2.0f*subx8;
        float subx40 = -1.0f/2.0f*imu_dt*x(STATE_IDX_GBIAS2) - 1.0f/2.0f*subx13 + (1.0f/2.0f)*subx8;
        float subx41 = subx35*subx40 + subx37 - subx38*(0.00029168463600000001f*quat.w()*quat.y() - 0.00029168463600000001f*subx1);
        float subx42 = (1.0f/2.0f)*del_ang(1);
        float subx43 = P(0,1)*subx39 + P(1,1)*subx36 + P(1,2)*subx41 - P(1,4)*subx38 + P(1,7)*subx42;
        float subx44 = P(0,0)*subx39 + P(0,1)*subx36 + P(0,2)*subx41 - P(0,4)*subx38 + P(0,7)*subx42;
        float subx45 = P(0,2)*subx39 + P(1,2)*subx36 + P(2,2)*subx41 - P(2,4)*subx38 + P(2,7)*subx42;
        float subx46 = P(0,7)*subx39 + P(1,7)*subx36 + P(2,7)*subx41 - P(4,7)*subx38 + P(7,7)*subx42;
        float subx47 = P(0,4)*subx39 + P(1,4)*subx36 + P(2,4)*subx41 - P(4,4)*subx38 + P(4,7)*subx42;
        float subx48 = subx36*subx43 - subx38*subx47 + subx39*subx44 + subx41*subx45 + subx42*subx46 + (((1.0f/2.0f)*x(STATE_IDX_GSCALE1) + 1.0f/2.0f)*((1.0f/2.0f)*x(STATE_IDX_GSCALE1) + 1.0f/2.0f))*((gyro_cross_sigma*subx14 + gyro_cross_sigma*subx3 + gyro_sigma*imu_dt)*(gyro_cross_sigma*subx14 + gyro_cross_sigma*subx3 + gyro_sigma*imu_dt));
        float subx49 = subx14*subx19/subx17;
        float subx50 = subx35 + subx37*subx40 - subx38*(-0.00029168463600000001f*quat.w()*quat.x() - 0.00029168463600000001f*subx5);
        float subx51 = ((subx40)*(subx40)) + 1;
        float subx52 = (1.0f/2.0f)*imu_dt*x(STATE_IDX_GBIAS0) - 1.0f/2.0f*subx0 + (1.0f/2.0f)*subx2 + subx35*subx40 - subx38*(-0.00029168463600000001f*quat.w()*quat.y() + 0.00029168463600000001f*subx1);
        float subx53 = (1.0f/2.0f)*del_ang(2);
        float subx54 = P(0,1)*subx50 + P(1,1)*subx52 + P(1,2)*subx51 - P(1,5)*subx38 + P(1,8)*subx53;
        float subx55 = P(0,0)*subx50 + P(0,1)*subx52 + P(0,2)*subx51 - P(0,5)*subx38 + P(0,8)*subx53;
        float subx56 = P(0,2)*subx50 + P(1,2)*subx52 + P(2,2)*subx51 - P(2,5)*subx38 + P(2,8)*subx53;
        float subx57 = P(0,7)*subx50 + P(1,7)*subx52 + P(2,7)*subx51 - P(5,7)*subx38 + P(7,8)*subx53;
        float subx58 = P(0,4)*subx50 + P(1,4)*subx52 + P(2,4)*subx51 - P(4,5)*subx38 + P(4,8)*subx53;
        float subx59 = subx36*subx54 - subx38*subx58 + subx39*subx55 + subx41*subx56 + subx42*subx57;
        float subx60 = subx19*subx7/subx17;
        float subx61 = ((subx37)*(subx37)) + 1;
        float subx62 = (1.0f/2.0f)*imu_dt*x(STATE_IDX_GBIAS1) + subx37*subx40 - subx38*(0.00029168463600000001f*quat.w()*quat.x() + 0.00029168463600000001f*subx5) - 1.0f/2.0f*subx4 + (1.0f/2.0f)*subx6;
        float subx63 = subx35*subx37 - subx38*(-0.00014584231800000001f*subx10 + 0.00014584231800000001f*subx11 + 0.00014584231800000001f*subx12 - 0.00014584231800000001f*subx9) + subx40;
        float subx64 = (1.0f/2.0f)*del_ang(0);
        float subx65 = P(0,1)*subx61 + P(1,1)*subx63 + P(1,2)*subx62 - P(1,3)*subx38 + P(1,6)*subx64;
        float subx66 = P(0,0)*subx61 + P(0,1)*subx63 + P(0,2)*subx62 - P(0,3)*subx38 + P(0,6)*subx64;
        float subx67 = P(0,2)*subx61 + P(1,2)*subx63 + P(2,2)*subx62 - P(2,3)*subx38 + P(2,6)*subx64;
        float subx68 = P(0,7)*subx61 + P(1,7)*subx63 + P(2,7)*subx62 - P(3,7)*subx38 + P(6,7)*subx64;
        float subx69 = P(0,4)*subx61 + P(1,4)*subx63 + P(2,4)*subx62 - P(3,4)*subx38 + P(4,6)*subx64;
        float subx70 = subx36*subx65 - subx38*subx69 + subx39*subx66 + subx41*subx67 + subx42*subx68;
        float subx71 = subx48*subx49 - subx59*subx60 + subx70;
        float subx72 = P(0,8)*subx39 + P(1,8)*subx36 + P(2,8)*subx41 - P(4,8)*subx38 + P(7,8)*subx42;
        float subx73 = P(0,5)*subx39 + P(1,5)*subx36 + P(2,5)*subx41 - P(4,5)*subx38 + P(5,7)*subx42;
        float subx74 = -subx38*subx73 + subx43*subx52 + subx44*subx50 + subx45*subx51 + subx53*subx72;
        float subx75 = P(0,8)*subx50 + P(1,8)*subx52 + P(2,8)*subx51 - P(5,8)*subx38 + P(8,8)*subx53;
        float subx76 = P(0,5)*subx50 + P(1,5)*subx52 + P(2,5)*subx51 - P(5,5)*subx38 + P(5,8)*subx53;
        float subx77 = -subx38*subx76 + subx50*subx55 + subx51*subx56 + subx52*subx54 + subx53*subx75 + (((1.0f/2.0f)*x(STATE_IDX_GSCALE2) + 1.0f/2.0f)*((1.0f/2.0f)*x(STATE_IDX_GSCALE2) + 1.0f/2.0f))*((gyro_cross_sigma*subx3 + gyro_cross_sigma*subx7 + gyro_sigma*imu_dt)*(gyro_cross_sigma*subx3 + gyro_cross_sigma*subx7 + gyro_sigma*imu_dt));
        float subx78 = P(0,8)*subx61 + P(1,8)*subx63 + P(2,8)*subx62 - P(3,8)*subx38 + P(6,8)*subx64;
        float subx79 = P(0,5)*subx61 + P(1,5)*subx63 + P(2,5)*subx62 - P(3,5)*subx38 + P(5,6)*subx64;
        float subx80 = -subx38*subx79 + subx50*subx66 + subx51*subx67 + subx52*subx65 + subx53*subx78;
        float subx81 = subx49*subx74 - subx60*subx77 + subx80;
        float subx82 = P(0,6)*subx39 + P(1,6)*subx36 + P(2,6)*subx41 - P(4,6)*subx38 + P(6,7)*subx42;
        float subx83 = P(0,3)*subx39 + P(1,3)*subx36 + P(2,3)*subx41 - P(3,4)*subx38 + P(3,7)*subx42;
        float subx84 = -subx38*subx83 + subx43*subx63 + subx44*subx61 + subx45*subx62 + subx64*subx82;
        float subx85 = P(0,6)*subx50 + P(1,6)*subx52 + P(2,6)*subx51 - P(5,6)*subx38 + P(6,8)*subx53;
        float subx86 = P(0,3)*subx50 + P(1,3)*subx52 + P(2,3)*subx51 - P(3,5)*subx38 + P(3,8)*subx53;
        float subx87 = -subx38*subx86 + subx54*subx63 + subx55*subx61 + subx56*subx62 + subx64*subx85;
        float subx88 = P(0,6)*subx61 + P(1,6)*subx63 + P(2,6)*subx62 - P(3,6)*subx38 + P(6,6)*subx64;
        float subx89 = P(0,3)*subx61 + P(1,3)*subx63 + P(2,3)*subx62 - P(3,3)*subx38 + P(3,6)*subx64;
        float subx90 = -subx38*subx89 + subx61*subx66 + subx62*subx67 + subx63*subx65 + subx64*subx88 + (((1.0f/2.0f)*x(STATE_IDX_GSCALE0) + 1.0f/2.0f)*((1.0f/2.0f)*x(STATE_IDX_GSCALE0) + 1.0f/2.0f))*((gyro_cross_sigma*subx14 + gyro_cross_sigma*subx7 + gyro_sigma*imu_dt)*(gyro_cross_sigma*subx14 + gyro_cross_sigma*subx7 + gyro_sigma*imu_dt));
        float subx91 = subx49*subx84 - subx60*subx87 + subx90;
        float subx92 = subx20/subx17;
        float subx93 = -subx49*subx91 + subx71 + subx81*subx92;
        float subx94 = subx60*subx91 - subx71*subx92 + subx81;
        float subx95 = subx49*subx83 - subx60*subx86 + subx89;
        float subx96 = subx47*subx49 - subx58*subx60 + subx69;
        float subx97 = subx49*subx73 - subx60*subx76 + subx79;
        float subx98 = subx49*subx82 - subx60*subx85 + subx88;
        float subx99 = subx46*subx49 - subx57*subx60 + subx68;
        float subx100 = subx49*subx72 - subx60*subx75 + subx78;
        float subx101 = P(0,9)*subx39 + P(1,9)*subx36 + P(2,9)*subx41 - P(4,9)*subx38 + P(7,9)*subx42;
        float subx102 = P(0,9)*subx50 + P(1,9)*subx52 + P(2,9)*subx51 - P(5,9)*subx38 + P(8,9)*subx53;
        float subx103 = P(0,9)*subx61 + P(1,9)*subx63 + P(2,9)*subx62 - P(3,9)*subx38 + P(6,9)*subx64;
        float subx104 = subx101*subx49 - subx102*subx60 + subx103;
        float subx105 = P(0,10)*subx39 + P(1,10)*subx36 + P(2,10)*subx41 - P(4,10)*subx38 + P(7,10)*subx42;
        float subx106 = P(0,10)*subx50 + P(1,10)*subx52 + P(2,10)*subx51 - P(5,10)*subx38 + P(8,10)*subx53;
        float subx107 = P(0,10)*subx61 + P(1,10)*subx63 + P(2,10)*subx62 - P(3,10)*subx38 + P(6,10)*subx64;
        float subx108 = subx105*subx49 - subx106*subx60 + subx107;
        float subx109 = P(0,11)*subx39 + P(1,11)*subx36 + P(2,11)*subx41 - P(4,11)*subx38 + P(7,11)*subx42;
        float subx110 = P(0,11)*subx50 + P(1,11)*subx52 + P(2,11)*subx51 - P(5,11)*subx38 + P(8,11)*subx53;
        float subx111 = P(0,11)*subx61 + P(1,11)*subx63 + P(2,11)*subx62 - P(3,11)*subx38 + P(6,11)*subx64;
        float subx112 = subx109*subx49 - subx110*subx60 + subx111;
        float subx113 = P(0,15)*subx39 + P(1,15)*subx36 + P(2,15)*subx41 - 1.0f/2.0f*P(4,15)*imu_dt + P(7,15)*subx42;
        float subx114 = P(0,12)*subx39 + P(1,12)*subx36 + P(2,12)*subx41 - P(4,12)*subx38 + P(7,12)*subx42 + imu_dt*subx113;
        float subx115 = P(0,15)*subx50 + P(1,15)*subx52 + P(2,15)*subx51 - 1.0f/2.0f*P(5,15)*imu_dt + P(8,15)*subx53;
        float subx116 = P(0,12)*subx50 + P(1,12)*subx52 + P(2,12)*subx51 - P(5,12)*subx38 + P(8,12)*subx53 + imu_dt*subx115;
        float subx117 = P(0,15)*subx61 + P(1,15)*subx63 + P(2,15)*subx62 - 1.0f/2.0f*P(3,15)*imu_dt + P(6,15)*subx64;
        float subx118 = P(0,12)*subx61 + P(1,12)*subx63 + P(2,12)*subx62 - P(3,12)*subx38 + P(6,12)*subx64 + imu_dt*subx117;
        float subx119 = subx114*subx49 - subx116*subx60 + subx118;
        float subx120 = P(0,16)*subx39 + P(1,16)*subx36 + P(2,16)*subx41 - 1.0f/2.0f*P(4,16)*imu_dt + P(7,16)*subx42;
        float subx121 = P(0,13)*subx39 + P(1,13)*subx36 + P(2,13)*subx41 - P(4,13)*subx38 + P(7,13)*subx42 + imu_dt*subx120;
        float subx122 = P(0,16)*subx50 + P(1,16)*subx52 + P(2,16)*subx51 - 1.0f/2.0f*P(5,16)*imu_dt + P(8,16)*subx53;
        float subx123 = P(0,13)*subx50 + P(1,13)*subx52 + P(2,13)*subx51 - P(5,13)*subx38 + P(8,13)*subx53 + imu_dt*subx122;
        float subx124 = P(0,16)*subx61 + P(1,16)*subx63 + P(2,16)*subx62 - 1.0f/2.0f*P(3,16)*imu_dt + P(6,16)*subx64;
        float subx125 = P(0,13)*subx61 + P(1,13)*subx63 + P(2,13)*subx62 - P(3,13)*subx38 + P(6,13)*subx64 + imu_dt*subx124;
        float subx126 = subx121*subx49 - subx123*subx60 + subx125;
        float subx127 = P(0,17)*subx39 + P(1,17)*subx36 + P(2,17)*subx41 - 1.0f/2.0f*P(4,17)*imu_dt + P(7,17)*subx42;
        float subx128 = P(0,14)*subx39 + P(1,14)*subx36 + P(2,14)*subx41 - P(4,14)*subx38 + P(7,14)*subx42 + imu_dt*subx127;
        float subx129 = P(0,17)*subx50 + P(1,17)*subx52 + P(2,17)*subx51 - 1.0f/2.0f*P(5,17)*imu_dt + P(8,17)*subx53;
        float subx130 = P(0,14)*subx50 + P(1,14)*subx52 + P(2,14)*subx51 - P(5,14)*subx38 + P(8,14)*subx53 + imu_dt*subx129;
        float subx131 = P(0,17)*subx61 + P(1,17)*subx63 + P(2,17)*subx62 - 1.0f/2.0f*P(3,17)*imu_dt + P(6,17)*subx64;
        float subx132 = P(0,14)*subx61 + P(1,14)*subx63 + P(2,14)*subx62 - P(3,14)*subx38 + P(6,14)*subx64 + imu_dt*subx131;
        float subx133 = subx128*subx49 - subx130*subx60 + subx132;
        float subx134 = 4*quat.w();
        float subx135 = 2.0f*subx9;
        float subx136 = 2.0f*subx10;
        float subx137 = 2.0f*subx11;
        float subx138 = 2.0f*subx12;
        float subx139 = subx21*(-quat.y()*subx134 - 4.0f*subx1) + subx27*(subx135 - subx136 + subx137 - subx138);
        float subx140 = subx21*(-quat.z()*subx134 + 4.0f*subx24) + subx23*(-subx135 + subx136 - subx137 + subx138);
        float subx141 = 4.0f*quat.w();
        float subx142 = subx23*(quat.y()*subx141 + 4.0f*subx1) + subx27*(quat.z()*subx141 - 4.0f*subx24);
        float subx143 = imu_dt*subx28;
        float subx144 = imu_dt*subx26;
        float subx145 = imu_dt*subx22;
        float subx146 = -subx101*subx145 - subx105*subx144 - subx109*subx143 + subx113 + subx139*subx43 + subx140*subx45 + subx142*subx44;
        float subx147 = -subx102*subx145 - subx106*subx144 - subx110*subx143 + subx115 + subx139*subx54 + subx140*subx56 + subx142*subx55;
        float subx148 = -subx103*subx145 - subx107*subx144 - subx111*subx143 + subx117 + subx139*subx65 + subx140*subx67 + subx142*subx66;
        float subx149 = subx146*subx49 - subx147*subx60 + subx148;
        float subx150 = subx21*(quat.x()*subx141 - 4.0f*subx5) + subx27*(quat.z()*subx141 + 4.0f*subx24);
        float subx151 = subx21*(subx135 - subx136 - subx137 + subx138) + subx23*(-quat.z()*subx134 - 4.0f*subx24);
        float subx152 = subx23*(-quat.x()*subx134 + 4.0f*subx5) + subx27*(-subx135 + subx136 + subx137 - subx138);
        float subx153 = imu_dt*subx29;
        float subx154 = imu_dt*subx31;
        float subx155 = imu_dt*subx30;
        float subx156 = -subx101*subx153 - subx105*subx155 - subx109*subx154 + subx120 + subx150*subx43 + subx151*subx45 + subx152*subx44;
        float subx157 = -subx102*subx153 - subx106*subx155 - subx110*subx154 + subx122 + subx150*subx54 + subx151*subx56 + subx152*subx55;
        float subx158 = -subx103*subx153 - subx107*subx155 - subx111*subx154 + subx124 + subx150*subx65 + subx151*subx67 + subx152*subx66;
        float subx159 = subx156*subx49 - subx157*subx60 + subx158;
        float subx160 = subx21*(quat.x()*subx141 + 4.0f*subx5) + subx23*(quat.y()*subx141 - 4.0f*subx1);
        float subx161 = subx21*(-subx135 - subx136 + subx137 + subx138) + subx27*(-quat.y()*subx134 + 4.0f*subx1);
        float subx162 = subx23*(subx135 + subx136 - subx137 - subx138) + subx27*(-quat.x()*subx134 - 4.0f*subx5);
        float subx163 = imu_dt*subx33;
        float subx164 = imu_dt*subx32;
        float subx165 = imu_dt*subx34;
        float subx166 = -subx101*subx164 - subx105*subx163 - subx109*subx165 + subx127 + subx160*subx45 + subx161*subx43 + subx162*subx44;
        float subx167 = -subx102*subx164 - subx106*subx163 - subx110*subx165 + subx129 + subx160*subx56 + subx161*subx54 + subx162*subx55;
        float subx168 = -subx103*subx164 - subx107*subx163 - subx111*subx165 + subx131 + subx160*subx67 + subx161*subx65 + subx162*subx66;
        float subx169 = subx166*subx49 - subx167*subx60 + subx168;
        float subx170 = -subx49*subx80 + subx74 + subx77*subx92;
        float subx171 = -subx49*subx90 + subx84 + subx87*subx92;
        float subx172 = subx48 - subx49*subx70 + subx59*subx92;
        float subx173 = subx170 + subx171*subx60 - subx172*subx92;
        float subx174 = -subx49*subx89 + subx83 + subx86*subx92;
        float subx175 = subx47 - subx49*subx69 + subx58*subx92;
        float subx176 = -subx49*subx79 + subx73 + subx76*subx92;
        float subx177 = -subx49*subx88 + subx82 + subx85*subx92;
        float subx178 = subx46 - subx49*subx68 + subx57*subx92;
        float subx179 = -subx49*subx78 + subx72 + subx75*subx92;
        float subx180 = subx101 + subx102*subx92 - subx103*subx49;
        float subx181 = subx105 + subx106*subx92 - subx107*subx49;
        float subx182 = subx109 + subx110*subx92 - subx111*subx49;
        float subx183 = subx114 + subx116*subx92 - subx118*subx49;
        float subx184 = subx121 + subx123*subx92 - subx125*subx49;
        float subx185 = subx128 + subx130*subx92 - subx132*subx49;
        float subx186 = subx146 + subx147*subx92 - subx148*subx49;
        float subx187 = subx156 + subx157*subx92 - subx158*subx49;
        float subx188 = subx166 + subx167*subx92 - subx168*subx49;
        float subx189 = subx60*subx89 - subx83*subx92 + subx86;
        float subx190 = -subx47*subx92 + subx58 + subx60*subx69;
        float subx191 = subx60*subx79 - subx73*subx92 + subx76;
        float subx192 = subx60*subx88 - subx82*subx92 + subx85;
        float subx193 = -subx46*subx92 + subx57 + subx60*subx68;
        float subx194 = subx60*subx78 - subx72*subx92 + subx75;
        float subx195 = -subx101*subx92 + subx102 + subx103*subx60;
        float subx196 = -subx105*subx92 + subx106 + subx107*subx60;
        float subx197 = -subx109*subx92 + subx110 + subx111*subx60;
        float subx198 = -subx114*subx92 + subx116 + subx118*subx60;
        float subx199 = -subx121*subx92 + subx123 + subx125*subx60;
        float subx200 = -subx128*subx92 + subx130 + subx132*subx60;
        float subx201 = -subx146*subx92 + subx147 + subx148*subx60;
        float subx202 = -subx156*subx92 + subx157 + subx158*subx60;
        float subx203 = -subx166*subx92 + subx167 + subx168*subx60;
        float subx204 = ((imu_dt)*(imu_dt));
        float subx205 = ((gbias_pnoise)*(gbias_pnoise))*subx204;
        float subx206 = P(0,3)*subx142 + P(1,3)*subx139 + P(2,3)*subx140 - P(3,10)*subx144 - P(3,11)*subx143 + P(3,15) - P(3,9)*subx145;
        float subx207 = P(0,3)*subx152 + P(1,3)*subx150 + P(2,3)*subx151 - P(3,10)*subx155 - P(3,11)*subx154 + P(3,16) - P(3,9)*subx153;
        float subx208 = P(0,3)*subx162 + P(1,3)*subx161 + P(2,3)*subx160 - P(3,10)*subx163 - P(3,11)*subx165 + P(3,17) - P(3,9)*subx164;
        float subx209 = P(0,4)*subx142 + P(1,4)*subx139 + P(2,4)*subx140 - P(4,10)*subx144 - P(4,11)*subx143 + P(4,15) - P(4,9)*subx145;
        float subx210 = P(0,4)*subx152 + P(1,4)*subx150 + P(2,4)*subx151 - P(4,10)*subx155 - P(4,11)*subx154 + P(4,16) - P(4,9)*subx153;
        float subx211 = P(0,4)*subx162 + P(1,4)*subx161 + P(2,4)*subx160 - P(4,10)*subx163 - P(4,11)*subx165 + P(4,17) - P(4,9)*subx164;
        float subx212 = P(0,5)*subx142 + P(1,5)*subx139 + P(2,5)*subx140 - P(5,10)*subx144 - P(5,11)*subx143 + P(5,15) - P(5,9)*subx145;
        float subx213 = P(0,5)*subx152 + P(1,5)*subx150 + P(2,5)*subx151 - P(5,10)*subx155 - P(5,11)*subx154 + P(5,16) - P(5,9)*subx153;
        float subx214 = P(0,5)*subx162 + P(1,5)*subx161 + P(2,5)*subx160 - P(5,10)*subx163 - P(5,11)*subx165 + P(5,17) - P(5,9)*subx164;
        float subx215 = ((gscale_pnoise)*(gscale_pnoise))*subx204;
        float subx216 = P(0,6)*subx142 + P(1,6)*subx139 + P(2,6)*subx140 - P(6,10)*subx144 - P(6,11)*subx143 + P(6,15) - P(6,9)*subx145;
        float subx217 = P(0,6)*subx152 + P(1,6)*subx150 + P(2,6)*subx151 - P(6,10)*subx155 - P(6,11)*subx154 + P(6,16) - P(6,9)*subx153;
        float subx218 = P(0,6)*subx162 + P(1,6)*subx161 + P(2,6)*subx160 - P(6,10)*subx163 - P(6,11)*subx165 + P(6,17) - P(6,9)*subx164;
        float subx219 = P(0,7)*subx142 + P(1,7)*subx139 + P(2,7)*subx140 - P(7,10)*subx144 - P(7,11)*subx143 + P(7,15) - P(7,9)*subx145;
        float subx220 = P(0,7)*subx152 + P(1,7)*subx150 + P(2,7)*subx151 - P(7,10)*subx155 - P(7,11)*subx154 + P(7,16) - P(7,9)*subx153;
        float subx221 = P(0,7)*subx162 + P(1,7)*subx161 + P(2,7)*subx160 - P(7,10)*subx163 - P(7,11)*subx165 + P(7,17) - P(7,9)*subx164;
        float subx222 = P(0,8)*subx142 + P(1,8)*subx139 + P(2,8)*subx140 - P(8,10)*subx144 - P(8,11)*subx143 + P(8,15) - P(8,9)*subx145;
        float subx223 = P(0,8)*subx152 + P(1,8)*subx150 + P(2,8)*subx151 - P(8,10)*subx155 - P(8,11)*subx154 + P(8,16) - P(8,9)*subx153;
        float subx224 = P(0,8)*subx162 + P(1,8)*subx161 + P(2,8)*subx160 - P(8,10)*subx163 - P(8,11)*subx165 + P(8,17) - P(8,9)*subx164;
        float subx225 = P(9,12) + P(9,15)*imu_dt;
        float subx226 = P(9,13) + P(9,16)*imu_dt;
        float subx227 = P(9,14) + P(9,17)*imu_dt;
        float subx228 = P(0,9)*subx142 + P(1,9)*subx139 + P(2,9)*subx140 - P(9,10)*subx144 - P(9,11)*subx143 + P(9,15) - P(9,9)*subx145;
        float subx229 = P(0,9)*subx152 + P(1,9)*subx150 + P(2,9)*subx151 - P(9,10)*subx155 - P(9,11)*subx154 + P(9,16) - P(9,9)*subx153;
        float subx230 = P(0,9)*subx162 + P(1,9)*subx161 + P(2,9)*subx160 - P(9,10)*subx163 - P(9,11)*subx165 + P(9,17) - P(9,9)*subx164;
        float subx231 = P(10,12) + P(10,15)*imu_dt;
        float subx232 = P(10,13) + P(10,16)*imu_dt;
        float subx233 = P(10,14) + P(10,17)*imu_dt;
        float subx234 = P(0,10)*subx142 + P(1,10)*subx139 - P(10,10)*subx144 - P(10,11)*subx143 + P(10,15) + P(2,10)*subx140 - P(9,10)*subx145;
        float subx235 = P(0,10)*subx152 + P(1,10)*subx150 - P(10,10)*subx155 - P(10,11)*subx154 + P(10,16) + P(2,10)*subx151 - P(9,10)*subx153;
        float subx236 = P(0,10)*subx162 + P(1,10)*subx161 - P(10,10)*subx163 - P(10,11)*subx165 + P(10,17) + P(2,10)*subx160 - P(9,10)*subx164;
        float subx237 = P(11,12) + P(11,15)*imu_dt;
        float subx238 = P(11,13) + P(11,16)*imu_dt;
        float subx239 = P(11,14) + P(11,17)*imu_dt;
        float subx240 = P(0,11)*subx142 + P(1,11)*subx139 - P(10,11)*subx144 - P(11,11)*subx143 + P(11,15) + P(2,11)*subx140 - P(9,11)*subx145;
        float subx241 = P(0,11)*subx152 + P(1,11)*subx150 - P(10,11)*subx155 - P(11,11)*subx154 + P(11,16) + P(2,11)*subx151 - P(9,11)*subx153;
        float subx242 = P(0,11)*subx162 + P(1,11)*subx161 - P(10,11)*subx163 - P(11,11)*subx165 + P(11,17) + P(2,11)*subx160 - P(9,11)*subx164;
        float subx243 = P(12,13) + P(13,15)*imu_dt + imu_dt*(P(12,16) + P(15,16)*imu_dt);
        float subx244 = P(12,14) + P(14,15)*imu_dt + imu_dt*(P(12,17) + P(15,17)*imu_dt);
        float subx245 = P(0,12) + P(0,15)*imu_dt;
        float subx246 = P(1,12) + P(1,15)*imu_dt;
        float subx247 = P(2,12) + P(2,15)*imu_dt;
        float subx248 = P(12,15) + P(15,15)*imu_dt + subx139*subx246 + subx140*subx247 + subx142*subx245 - subx143*subx237 - subx144*subx231 - subx145*subx225;
        float subx249 = P(12,16) + P(15,16)*imu_dt + subx150*subx246 + subx151*subx247 + subx152*subx245 - subx153*subx225 - subx154*subx237 - subx155*subx231;
        float subx250 = P(12,17) + P(15,17)*imu_dt + subx160*subx247 + subx161*subx246 + subx162*subx245 - subx163*subx231 - subx164*subx225 - subx165*subx237;
        float subx251 = P(13,14) + P(14,16)*imu_dt + imu_dt*(P(13,17) + P(16,17)*imu_dt);
        float subx252 = P(0,13) + P(0,16)*imu_dt;
        float subx253 = P(1,13) + P(1,16)*imu_dt;
        float subx254 = P(2,13) + P(2,16)*imu_dt;
        float subx255 = P(13,15) + P(15,16)*imu_dt + subx139*subx253 + subx140*subx254 + subx142*subx252 - subx143*subx238 - subx144*subx232 - subx145*subx226;
        float subx256 = P(13,16) + P(16,16)*imu_dt + subx150*subx253 + subx151*subx254 + subx152*subx252 - subx153*subx226 - subx154*subx238 - subx155*subx232;
        float subx257 = P(13,17) + P(16,17)*imu_dt + subx160*subx254 + subx161*subx253 + subx162*subx252 - subx163*subx232 - subx164*subx226 - subx165*subx238;
        float subx258 = P(0,14) + P(0,17)*imu_dt;
        float subx259 = P(1,14) + P(1,17)*imu_dt;
        float subx260 = P(2,14) + P(2,17)*imu_dt;
        float subx261 = P(14,15) + P(15,17)*imu_dt + subx139*subx259 + subx140*subx260 + subx142*subx258 - subx143*subx239 - subx144*subx233 - subx145*subx227;
        float subx262 = P(14,16) + P(16,17)*imu_dt + subx150*subx259 + subx151*subx260 + subx152*subx258 - subx153*subx227 - subx154*subx239 - subx155*subx233;
        float subx263 = P(14,17) + P(17,17)*imu_dt + subx160*subx260 + subx161*subx259 + subx162*subx258 - subx163*subx233 - subx164*subx227 - subx165*subx239;
        float subx264 = ((accel_cross_sigma*subx23 + accel_cross_sigma*subx27 + accel_scale_sigma*subx21 + accel_sigma*imu_dt)*(accel_cross_sigma*subx23 + accel_cross_sigma*subx27 + accel_scale_sigma*subx21 + accel_sigma*imu_dt));
        float subx265 = P(0,1)*subx142 + P(1,1)*subx139 - P(1,10)*subx144 - P(1,11)*subx143 + P(1,15) + P(1,2)*subx140 - P(1,9)*subx145;
        float subx266 = P(0,2)*subx142 + P(1,2)*subx139 - P(2,10)*subx144 - P(2,11)*subx143 + P(2,15) + P(2,2)*subx140 - P(2,9)*subx145;
        float subx267 = P(0,0)*subx142 + P(0,1)*subx139 - P(0,10)*subx144 - P(0,11)*subx143 + P(0,15) + P(0,2)*subx140 - P(0,9)*subx145;
        float subx268 = 1.0f*quat.w();
        float subx269 = ((accel_cross_sigma*subx21 + accel_cross_sigma*subx27 + accel_scale_sigma*subx23 + accel_sigma*imu_dt)*(accel_cross_sigma*subx21 + accel_cross_sigma*subx27 + accel_scale_sigma*subx23 + accel_sigma*imu_dt));
        float subx270 = ((accel_cross_sigma*subx21 + accel_cross_sigma*subx23 + accel_scale_sigma*subx27 + accel_sigma*imu_dt)*(accel_cross_sigma*subx21 + accel_cross_sigma*subx23 + accel_scale_sigma*subx27 + accel_sigma*imu_dt));
        float subx271 = P(0,16)*subx142 + P(1,16)*subx139 - P(10,16)*imu_dt*subx26 - P(11,16)*imu_dt*subx28 + P(15,16) + P(2,16)*subx140 - P(9,16)*imu_dt*subx22 + subx150*subx265 + subx151*subx266 + subx152*subx267 - subx153*subx228 - subx154*subx240 - subx155*subx234 + subx22*subx264*subx29 + subx26*subx269*subx30 + subx270*subx28*subx31;
        float subx272 = P(0,17)*subx142 + P(1,17)*subx139 - P(10,17)*imu_dt*subx26 - P(11,17)*imu_dt*subx28 + P(15,17) + P(2,17)*subx140 - P(9,17)*imu_dt*subx22 + subx160*subx266 + subx161*subx265 + subx162*subx267 - subx163*subx234 - subx164*subx228 - subx165*subx240 + subx22*subx264*subx32 + subx26*subx269*subx33 + subx270*subx28*subx34;
        float subx273 = P(0,1)*subx152 + P(1,1)*subx150 - P(1,10)*subx155 - P(1,11)*subx154 + P(1,16) + P(1,2)*subx151 - P(1,9)*subx153;
        float subx274 = P(0,2)*subx152 + P(1,2)*subx150 - P(2,10)*subx155 - P(2,11)*subx154 + P(2,16) + P(2,2)*subx151 - P(2,9)*subx153;
        float subx275 = P(0,0)*subx152 + P(0,1)*subx150 - P(0,10)*subx155 - P(0,11)*subx154 + P(0,16) + P(0,2)*subx151 - P(0,9)*subx153;
        float subx276 = P(0,17)*subx152 + P(1,17)*subx150 - P(10,17)*imu_dt*subx30 - P(11,17)*imu_dt*subx31 + P(16,17) + P(2,17)*subx151 - P(9,17)*imu_dt*subx29 + subx160*subx274 + subx161*subx273 + subx162*subx275 - subx163*subx235 - subx164*subx229 - subx165*subx241 + subx264*subx29*subx32 + subx269*subx30*subx33 + subx270*subx31*subx34;

        x_n(0,0) = 0;
        x_n(1,0) = 0;
        x_n(2,0) = 0;
        x_n(3,0) = x(STATE_IDX_GBIAS0);
        x_n(4,0) = x(STATE_IDX_GBIAS1);
        x_n(5,0) = x(STATE_IDX_GBIAS2);
        x_n(6,0) = x(STATE_IDX_GSCALE0);
        x_n(7,0) = x(STATE_IDX_GSCALE1);
        x_n(8,0) = x(STATE_IDX_GSCALE2);
        x_n(9,0) = x(STATE_IDX_ABIAS0);
        x_n(10,0) = x(STATE_IDX_ABIAS1);
        x_n(11,0) = x(STATE_IDX_ABIAS2);
        x_n(12,0) = imu_dt*x(STATE_IDX_VEL0) + x(STATE_IDX_POS0);
        x_n(13,0) = imu_dt*x(STATE_IDX_VEL1) + x(STATE_IDX_POS1);
        x_n(14,0) = imu_dt*x(STATE_IDX_VEL2) + x(STATE_IDX_POS2);
        x_n(15,0) = gravity_vec(0)*imu_dt + subx21*subx22 + subx23*subx26 + subx27*subx28 + x(STATE_IDX_VEL0);
        x_n(16,0) = gravity_vec(1)*imu_dt + subx21*subx29 + subx23*subx30 + subx27*subx31 + x(STATE_IDX_VEL1);
        x_n(17,0) = gravity_vec(2)*imu_dt + subx21*subx32 + subx23*subx33 + subx27*subx34 + x(STATE_IDX_VEL2);

        P_n(0,0) = subx49*subx71 - subx60*subx81 + subx91;
        P_n(0,1) = subx93;
        P_n(0,2) = subx94;
        P_n(0,3) = subx95;
        P_n(0,4) = subx96;
        P_n(0,5) = subx97;
        P_n(0,6) = subx98;
        P_n(0,7) = subx99;
        P_n(0,8) = subx100;
        P_n(0,9) = subx104;
        P_n(0,10) = subx108;
        P_n(0,11) = subx112;
        P_n(0,12) = subx119;
        P_n(0,13) = subx126;
        P_n(0,14) = subx133;
        P_n(0,15) = subx149;
        P_n(0,16) = subx159;
        P_n(0,17) = subx169;
        P_n(1,0) = subx93;
        P_n(1,1) = subx170*subx92 - subx171*subx49 + subx172;
        P_n(1,2) = subx173;
        P_n(1,3) = subx174;
        P_n(1,4) = subx175;
        P_n(1,5) = subx176;
        P_n(1,6) = subx177;
        P_n(1,7) = subx178;
        P_n(1,8) = subx179;
        P_n(1,9) = subx180;
        P_n(1,10) = subx181;
        P_n(1,11) = subx182;
        P_n(1,12) = subx183;
        P_n(1,13) = subx184;
        P_n(1,14) = subx185;
        P_n(1,15) = subx186;
        P_n(1,16) = subx187;
        P_n(1,17) = subx188;
        P_n(2,0) = subx94;
        P_n(2,1) = subx173;
        P_n(2,2) = subx60*subx80 + subx60*(subx60*subx90 - subx84*subx92 + subx87) - subx74*subx92 + subx77 - subx92*(-subx48*subx92 + subx59 + subx60*subx70);
        P_n(2,3) = subx189;
        P_n(2,4) = subx190;
        P_n(2,5) = subx191;
        P_n(2,6) = subx192;
        P_n(2,7) = subx193;
        P_n(2,8) = subx194;
        P_n(2,9) = subx195;
        P_n(2,10) = subx196;
        P_n(2,11) = subx197;
        P_n(2,12) = subx198;
        P_n(2,13) = subx199;
        P_n(2,14) = subx200;
        P_n(2,15) = subx201;
        P_n(2,16) = subx202;
        P_n(2,17) = subx203;
        P_n(3,0) = subx95;
        P_n(3,1) = subx174;
        P_n(3,2) = subx189;
        P_n(3,3) = P(3,3) + subx205;
        P_n(3,4) = P(3,4);
        P_n(3,5) = P(3,5);
        P_n(3,6) = P(3,6);
        P_n(3,7) = P(3,7);
        P_n(3,8) = P(3,8);
        P_n(3,9) = P(3,9);
        P_n(3,10) = P(3,10);
        P_n(3,11) = P(3,11);
        P_n(3,12) = P(3,12) + P(3,15)*imu_dt;
        P_n(3,13) = P(3,13) + P(3,16)*imu_dt;
        P_n(3,14) = P(3,14) + P(3,17)*imu_dt;
        P_n(3,15) = subx206;
        P_n(3,16) = subx207;
        P_n(3,17) = subx208;
        P_n(4,0) = subx96;
        P_n(4,1) = subx175;
        P_n(4,2) = subx190;
        P_n(4,3) = P(3,4);
        P_n(4,4) = P(4,4) + subx205;
        P_n(4,5) = P(4,5);
        P_n(4,6) = P(4,6);
        P_n(4,7) = P(4,7);
        P_n(4,8) = P(4,8);
        P_n(4,9) = P(4,9);
        P_n(4,10) = P(4,10);
        P_n(4,11) = P(4,11);
        P_n(4,12) = P(4,12) + P(4,15)*imu_dt;
        P_n(4,13) = P(4,13) + P(4,16)*imu_dt;
        P_n(4,14) = P(4,14) + P(4,17)*imu_dt;
        P_n(4,15) = subx209;
        P_n(4,16) = subx210;
        P_n(4,17) = subx211;
        P_n(5,0) = subx97;
        P_n(5,1) = subx176;
        P_n(5,2) = subx191;
        P_n(5,3) = P(3,5);
        P_n(5,4) = P(4,5);
        P_n(5,5) = P(5,5) + subx205;
        P_n(5,6) = P(5,6);
        P_n(5,7) = P(5,7);
        P_n(5,8) = P(5,8);
        P_n(5,9) = P(5,9);
        P_n(5,10) = P(5,10);
        P_n(5,11) = P(5,11);
        P_n(5,12) = P(5,12) + P(5,15)*imu_dt;
        P_n(5,13) = P(5,13) + P(5,16)*imu_dt;
        P_n(5,14) = P(5,14) + P(5,17)*imu_dt;
        P_n(5,15) = subx212;
        P_n(5,16) = subx213;
        P_n(5,17) = subx214;
        P_n(6,0) = subx98;
        P_n(6,1) = subx177;
        P_n(6,2) = subx192;
        P_n(6,3) = P(3,6);
        P_n(6,4) = P(4,6);
        P_n(6,5) = P(5,6);
        P_n(6,6) = P(6,6) + subx215;
        P_n(6,7) = P(6,7);
        P_n(6,8) = P(6,8);
        P_n(6,9) = P(6,9);
        P_n(6,10) = P(6,10);
        P_n(6,11) = P(6,11);
        P_n(6,12) = P(6,12) + P(6,15)*imu_dt;
        P_n(6,13) = P(6,13) + P(6,16)*imu_dt;
        P_n(6,14) = P(6,14) + P(6,17)*imu_dt;
        P_n(6,15) = subx216;
        P_n(6,16) = subx217;
        P_n(6,17) = subx218;
        P_n(7,0) = subx99;
        P_n(7,1) = subx178;
        P_n(7,2) = subx193;
        P_n(7,3) = P(3,7);
        P_n(7,4) = P(4,7);
        P_n(7,5) = P(5,7);
        P_n(7,6) = P(6,7);
        P_n(7,7) = P(7,7) + subx215;
        P_n(7,8) = P(7,8);
        P_n(7,9) = P(7,9);
        P_n(7,10) = P(7,10);
        P_n(7,11) = P(7,11);
        P_n(7,12) = P(7,12) + P(7,15)*imu_dt;
        P_n(7,13) = P(7,13) + P(7,16)*imu_dt;
        P_n(7,14) = P(7,14) + P(7,17)*imu_dt;
        P_n(7,15) = subx219;
        P_n(7,16) = subx220;
        P_n(7,17) = subx221;
        P_n(8,0) = subx100;
        P_n(8,1) = subx179;
        P_n(8,2) = subx194;
        P_n(8,3) = P(3,8);
        P_n(8,4) = P(4,8);
        P_n(8,5) = P(5,8);
        P_n(8,6) = P(6,8);
        P_n(8,7) = P(7,8);
        P_n(8,8) = P(8,8) + subx215;
        P_n(8,9) = P(8,9);
        P_n(8,10) = P(8,10);
        P_n(8,11) = P(8,11);
        P_n(8,12) = P(8,12) + P(8,15)*imu_dt;
        P_n(8,13) = P(8,13) + P(8,16)*imu_dt;
        P_n(8,14) = P(8,14) + P(8,17)*imu_dt;
        P_n(8,15) = subx222;
        P_n(8,16) = subx223;
        P_n(8,17) = subx224;
        P_n(9,0) = subx104;
        P_n(9,1) = subx180;
        P_n(9,2) = subx195;
        P_n(9,3) = P(3,9);
        P_n(9,4) = P(4,9);
        P_n(9,5) = P(5,9);
        P_n(9,6) = P(6,9);
        P_n(9,7) = P(7,9);
        P_n(9,8) = P(8,9);
        P_n(9,9) = P(9,9) + ((abias_pnoise_xy)*(abias_pnoise_xy))*subx204;
        P_n(9,10) = P(9,10);
        P_n(9,11) = P(9,11);
        P_n(9,12) = subx225;
        P_n(9,13) = subx226;
        P_n(9,14) = subx227;
        P_n(9,15) = subx228;
        P_n(9,16) = subx229;
        P_n(9,17) = subx230;
        P_n(10,0) = subx108;
        P_n(10,1) = subx181;
        P_n(10,2) = subx196;
        P_n(10,3) = P(3,10);
        P_n(10,4) = P(4,10);
        P_n(10,5) = P(5,10);
        P_n(10,6) = P(6,10);
        P_n(10,7) = P(7,10);
        P_n(10,8) = P(8,10);
        P_n(10,9) = P(9,10);
        P_n(10,10) = P(10,10) + ((abias_pnoise_xy)*(abias_pnoise_xy))*subx204;
        P_n(10,11) = P(10,11);
        P_n(10,12) = subx231;
        P_n(10,13) = subx232;
        P_n(10,14) = subx233;
        P_n(10,15) = subx234;
        P_n(10,16) = subx235;
        P_n(10,17) = subx236;
        P_n(11,0) = subx112;
        P_n(11,1) = subx182;
        P_n(11,2) = subx197;
        P_n(11,3) = P(3,11);
        P_n(11,4) = P(4,11);
        P_n(11,5) = P(5,11);
        P_n(11,6) = P(6,11);
        P_n(11,7) = P(7,11);
        P_n(11,8) = P(8,11);
        P_n(11,9) = P(9,11);
        P_n(11,10) = P(10,11);
        P_n(11,11) = P(11,11) + ((abias_pnoise_z)*(abias_pnoise_z))*subx204;
        P_n(11,12) = subx237;
        P_n(11,13) = subx238;
        P_n(11,14) = subx239;
        P_n(11,15) = subx240;
        P_n(11,16) = subx241;
        P_n(11,17) = subx242;
        P_n(12,0) = subx119;
        P_n(12,1) = subx183;
        P_n(12,2) = subx198;
        P_n(12,3) = P(3,12) + P(3,15)*imu_dt;
        P_n(12,4) = P(4,12) + P(4,15)*imu_dt;
        P_n(12,5) = P(5,12) + P(5,15)*imu_dt;
        P_n(12,6) = P(6,12) + P(6,15)*imu_dt;
        P_n(12,7) = P(7,12) + P(7,15)*imu_dt;
        P_n(12,8) = P(8,12) + P(8,15)*imu_dt;
        P_n(12,9) = subx225;
        P_n(12,10) = subx231;
        P_n(12,11) = subx237;
        P_n(12,12) = P(12,12) + P(12,15)*imu_dt + imu_dt*(P(12,15) + P(15,15)*imu_dt);
        P_n(12,13) = subx243;
        P_n(12,14) = subx244;
        P_n(12,15) = subx248;
        P_n(12,16) = subx249;
        P_n(12,17) = subx250;
        P_n(13,0) = subx126;
        P_n(13,1) = subx184;
        P_n(13,2) = subx199;
        P_n(13,3) = P(3,13) + P(3,16)*imu_dt;
        P_n(13,4) = P(4,13) + P(4,16)*imu_dt;
        P_n(13,5) = P(5,13) + P(5,16)*imu_dt;
        P_n(13,6) = P(6,13) + P(6,16)*imu_dt;
        P_n(13,7) = P(7,13) + P(7,16)*imu_dt;
        P_n(13,8) = P(8,13) + P(8,16)*imu_dt;
        P_n(13,9) = subx226;
        P_n(13,10) = subx232;
        P_n(13,11) = subx238;
        P_n(13,12) = subx243;
        P_n(13,13) = P(13,13) + P(13,16)*imu_dt + imu_dt*(P(13,16) + P(16,16)*imu_dt);
        P_n(13,14) = subx251;
        P_n(13,15) = subx255;
        P_n(13,16) = subx256;
        P_n(13,17) = subx257;
        P_n(14,0) = subx133;
        P_n(14,1) = subx185;
        P_n(14,2) = subx200;
        P_n(14,3) = P(3,14) + P(3,17)*imu_dt;
        P_n(14,4) = P(4,14) + P(4,17)*imu_dt;
        P_n(14,5) = P(5,14) + P(5,17)*imu_dt;
        P_n(14,6) = P(6,14) + P(6,17)*imu_dt;
        P_n(14,7) = P(7,14) + P(7,17)*imu_dt;
        P_n(14,8) = P(8,14) + P(8,17)*imu_dt;
        P_n(14,9) = subx227;
        P_n(14,10) = subx233;
        P_n(14,11) = subx239;
        P_n(14,12) = subx244;
        P_n(14,13) = subx251;
        P_n(14,14) = P(14,14) + P(14,17)*imu_dt + imu_dt*(P(14,17) + P(17,17)*imu_dt);
        P_n(14,15) = subx261;
        P_n(14,16) = subx262;
        P_n(14,17) = subx263;
        P_n(15,0) = subx149;
        P_n(15,1) = subx186;
        P_n(15,2) = subx201;
        P_n(15,3) = subx206;
        P_n(15,4) = subx209;
        P_n(15,5) = subx212;
        P_n(15,6) = subx216;
        P_n(15,7) = subx219;
        P_n(15,8) = subx222;
        P_n(15,9) = subx228;
        P_n(15,10) = subx234;
        P_n(15,11) = subx240;
        P_n(15,12) = subx248;
        P_n(15,13) = subx255;
        P_n(15,14) = subx261;
        P_n(15,15) = P(0,15)*subx142 + P(1,15)*subx139 - P(10,15)*imu_dt*subx26 - P(11,15)*imu_dt*subx28 + P(15,15) + P(2,15)*subx140 - P(9,15)*imu_dt*subx22 + subx139*subx265 + subx140*subx266 + subx142*subx267 - subx143*subx240 - subx144*subx234 - subx145*subx228 + ((subx22)*(subx22))*subx264 + 4.0f*subx269*((-quat.z()*subx268 + subx24)*(-quat.z()*subx268 + subx24)) + 4.0f*subx270*((quat.y()*subx268 + subx1)*(quat.y()*subx268 + subx1));
        P_n(15,16) = subx271;
        P_n(15,17) = subx272;
        P_n(16,0) = subx159;
        P_n(16,1) = subx187;
        P_n(16,2) = subx202;
        P_n(16,3) = subx207;
        P_n(16,4) = subx210;
        P_n(16,5) = subx213;
        P_n(16,6) = subx217;
        P_n(16,7) = subx220;
        P_n(16,8) = subx223;
        P_n(16,9) = subx229;
        P_n(16,10) = subx235;
        P_n(16,11) = subx241;
        P_n(16,12) = subx249;
        P_n(16,13) = subx256;
        P_n(16,14) = subx262;
        P_n(16,15) = subx271;
        P_n(16,16) = P(0,16)*subx152 + P(1,16)*subx150 - P(10,16)*imu_dt*subx30 - P(11,16)*imu_dt*subx31 + P(16,16) + P(2,16)*subx151 - P(9,16)*imu_dt*subx29 + subx150*subx273 + subx151*subx274 + subx152*subx275 - subx153*subx229 - subx154*subx241 - subx155*subx235 + 4.0f*subx264*((quat.z()*subx268 + subx24)*(quat.z()*subx268 + subx24)) + subx269*((subx30)*(subx30)) + 4.0f*subx270*((-quat.x()*subx268 + subx5)*(-quat.x()*subx268 + subx5));
        P_n(16,17) = subx276;
        P_n(17,0) = subx169;
        P_n(17,1) = subx188;
        P_n(17,2) = subx203;
        P_n(17,3) = subx208;
        P_n(17,4) = subx211;
        P_n(17,5) = subx214;
        P_n(17,6) = subx218;
        P_n(17,7) = subx221;
        P_n(17,8) = subx224;
        P_n(17,9) = subx230;
        P_n(17,10) = subx236;
        P_n(17,11) = subx242;
        P_n(17,12) = subx250;
        P_n(17,13) = subx257;
        P_n(17,14) = subx263;
        P_n(17,15) = subx272;
        P_n(17,16) = subx276;
        P_n(17,17) = P(0,17)*subx162 + P(1,17)*subx161 - P(10,17)*imu_dt*subx33 - P(11,17)*imu_dt*subx34 + P(17,17) + P(2,17)*subx160 - P(9,17)*imu_dt*subx32 + subx160*(P(0,2)*subx162 + P(1,2)*subx161 - P(2,10)*subx163 - P(2,11)*subx165 + P(2,17) + P(2,2)*subx160 - P(2,9)*subx164) + subx161*(P(0,1)*subx162 + P(1,1)*subx161 - P(1,10)*subx163 - P(1,11)*subx165 + P(1,17) + P(1,2)*subx160 - P(1,9)*subx164) + subx162*(P(0,0)*subx162 + P(0,1)*subx161 - P(0,10)*subx163 - P(0,11)*subx165 + P(0,17) + P(0,2)*subx160 - P(0,9)*subx164) - subx163*subx236 - subx164*subx230 - subx165*subx242 + 4.0f*subx264*((-quat.y()*subx268 + subx1)*(-quat.y()*subx268 + subx1)) + 4.0f*subx269*((quat.x()*subx268 + subx5)*(quat.x()*subx268 + subx5)) + subx270*((subx34)*(subx34));

        quat_n.w() = quat.w()*subx18 - quat.x()*subx18*subx20 - quat.y()*subx18*subx19*subx7 - quat.z()*subx14*subx18*subx19;
        quat_n.x() = quat.w()*subx18*subx20 + quat.x()*subx18 + quat.y()*subx14*subx18*subx19 - quat.z()*subx18*subx19*subx7;
        quat_n.y() = quat.w()*subx18*subx19*subx7 - quat.x()*subx14*subx18*subx19 + quat.y()*subx18 + quat.z()*subx18*subx20;
        quat_n.z() = quat.w()*subx14*subx18*subx19 + quat.x()*subx18*subx19*subx7 - quat.y()*subx18*subx20 + quat.z()*subx18;
    } //////// End generated code: Prediction model        ////////
}

void InertialNavigationEstimator::Mixand::get_heading_and_heading_sigma(float& heading, float& heading_sigma) {
    auto subx0 = cosf(0.5*lla_origin(0));
    auto subx1 = (1.0f/2.0f)*sqrtf(2)*cosf(0.5*lla_origin(1));
    auto subx2 = sinf(0.5*lla_origin(0));
    auto subx3 = subx0*subx1 + subx1*subx2;
    auto subx4 = (1.0f/2.0f)*sqrtf(2)*sinf(0.5*lla_origin(1));
    auto subx5 = -subx0*subx4 - subx2*subx4;
    auto subx6 = subx0*subx1 - subx1*subx2;
    auto subx7 = -subx0*subx4 + subx2*subx4;
    auto subx8 = quat.y()*subx7;
    auto subx9 = quat.w()*subx5 + quat.x()*subx6 + quat.z()*subx3 - subx8;
    auto subx10 = quat.x()*subx7;
    auto subx11 = quat.y()*subx6;
    auto subx12 = quat.w()*subx3 - quat.z()*subx5 + subx11;
    auto subx13 = 2*subx10 + 2*subx12;
    auto subx14 = quat.w()*subx6;
    auto subx15 = quat.w()*subx7 - quat.x()*subx3 + quat.y()*subx5 + quat.z()*subx6;
    auto subx16 = 2*subx15*(-quat.x()*subx5 - quat.y()*subx3 - quat.z()*subx7 + subx14);
    auto subx17 = -2*((subx15)*(subx15)) - 2*((subx10 + subx12)*(subx10 + subx12)) + 1;
    auto subx18 = subx0*subx4 + subx2*subx4;
    auto subx19 = 2*quat.w()*subx7 - 2*quat.x()*subx3 - 2*quat.y()*subx18 + 2*quat.z()*subx6;
    auto subx20 = -subx0*subx1 - subx1*subx2;
    auto subx21 = 1/(((subx17)*(subx17)) + ((subx13*subx9 + subx16)*(subx13*subx9 + subx16)));
    auto subx22 = subx21*(-subx13*subx9 - subx16);
    auto subx23 = subx0*subx4 - subx2*subx4;
    auto subx24 = 2*quat.w()*subx3 - 2*quat.z()*subx5 + 2*subx10 + 2*subx11;
    auto subx25 = 2*quat.w()*subx18 - 2*quat.x()*subx6;
    auto subx26 = -2*quat.x()*subx5;
    auto subx27 = -2*quat.y()*subx3 - 2*quat.z()*subx7 + 2*subx14;
    auto subx28 = subx17*subx21*(subx15*(-2*quat.y()*subx23 + 2*quat.z()*subx20 + subx25) + subx19*subx9 + subx24*(-quat.x()*subx5 - quat.y()*subx3 + quat.z()*subx23 + subx14) + (subx26 + subx27)*(quat.w()*subx20 + quat.z()*subx5 - subx10 - subx11)) + subx22*(-subx13*subx19 - 2*subx15*(2*quat.w()*subx20 + 2*quat.z()*subx5 - 2*subx10 - 2*subx11));
    auto subx29 = subx17*subx21*(subx15*(2*quat.w()*subx20 + 2*quat.x()*subx23 - 2*quat.z()*subx18 - 2*subx11) + subx24*(quat.w()*subx23 + quat.x()*subx3 - quat.y()*subx5 - quat.z()*subx6) + subx9*(2*quat.x()*subx18 + subx27) + (subx26 + subx27)*(quat.w()*subx5 + quat.x()*subx6 - quat.z()*subx20 - subx8)) + subx22*(-subx13*(2*quat.x()*subx18 + subx27) - 2*subx15*(2*quat.w()*subx5 + 2*quat.x()*subx6 - 2*quat.z()*subx20 - 2*subx8));
    auto subx30 = subx17*subx21*(subx15*(2*quat.w()*subx23 - 2*quat.x()*subx20 + 2*quat.y()*subx18 - 2*quat.z()*subx6) + subx24*(-quat.x()*subx23 + subx12) + subx9*(-2*quat.z()*subx3 + subx25 + 2*subx8) + (subx26 + subx27)*(-quat.x()*subx5 + quat.y()*subx20 - quat.z()*subx7 + subx14)) + subx22*(-subx13*(-2*quat.z()*subx3 + subx25 + 2*subx8) - 2*subx15*(2*quat.y()*subx20 - 2*quat.z()*subx7 + 2*subx14 + subx26));
    heading = atan2f(subx13*subx9 + subx16, subx17);
    heading_sigma = sqrtf(subx28*(P(0,0)*subx28 + P(0,1)*subx29 + P(0,2)*subx30) + subx29*(P(0,1)*subx28 + P(1,1)*subx29 + P(1,2)*subx30) + subx30*(P(0,2)*subx28 + P(1,2)*subx29 + P(2,2)*subx30));

    if (heading < 0) {
        heading += 2*(float)M_PI;
    }
}

template <typename Derived_x, typename Derived_P, typename Derived_quat>
static void zero_rot_err_inplace(Eigen::DenseBase<Derived_x>& x, Eigen::DenseBase<Derived_P>& P, Eigen::QuaternionBase<Derived_quat>& quat) {
    EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE(Derived_x, N_STATES, 1);
    EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE(Derived_P, N_STATES, N_STATES);

    // NOTE: generated code below is carefully re-ordered so that aliasing doesn't happen
    { //////// Begin generated code: zero rotation error    ////////
        float subx0 = ((x(STATE_IDX_ROT_ERR0))*(x(STATE_IDX_ROT_ERR0))) + ((x(STATE_IDX_ROT_ERR1))*(x(STATE_IDX_ROT_ERR1))) + ((x(STATE_IDX_ROT_ERR2))*(x(STATE_IDX_ROT_ERR2))) + 1;
        float subx1 = 1/(sqrtf(subx0));
        float subx2 = quat.w()*subx1;
        float subx3 = quat.x()*subx1;
        float subx4 = quat.y()*subx1;
        float subx5 = quat.z()*subx1;
        float subx6 = 1/(subx0);
        float subx7 = subx6*x(STATE_IDX_ROT_ERR2);
        float subx8 = subx6*x(STATE_IDX_ROT_ERR1);
        float subx9 = P(0,1) + P(1,1)*subx7 - P(1,2)*subx8;
        float subx10 = P(0,2) + P(1,2)*subx7 - P(2,2)*subx8;
        float subx11 = P(0,1)*subx7;
        float subx12 = P(0,2)*subx8;
        float subx13 = P(0,0) + subx11 - subx12;
        float subx14 = subx6*x(STATE_IDX_ROT_ERR0);
        float subx15 = subx10*subx14 - subx13*subx7 + subx9;
        float subx16 = subx10 + subx13*subx8 - subx14*subx9;
        float subx17 = P(0,3) + P(1,3)*subx7 - P(2,3)*subx8;
        float subx18 = P(0,4) + P(1,4)*subx7 - P(2,4)*subx8;
        float subx19 = P(0,5) + P(1,5)*subx7 - P(2,5)*subx8;
        float subx20 = P(0,6) + P(1,6)*subx7 - P(2,6)*subx8;
        float subx21 = P(0,7) + P(1,7)*subx7 - P(2,7)*subx8;
        float subx22 = P(0,8) + P(1,8)*subx7 - P(2,8)*subx8;
        float subx23 = P(0,9) + P(1,9)*subx7 - P(2,9)*subx8;
        float subx24 = P(0,10) + P(1,10)*subx7 - P(2,10)*subx8;
        float subx25 = P(0,11) + P(1,11)*subx7 - P(2,11)*subx8;
        float subx26 = P(0,12) + P(1,12)*subx7 - P(2,12)*subx8;
        float subx27 = P(0,13) + P(1,13)*subx7 - P(2,13)*subx8;
        float subx28 = P(0,14) + P(1,14)*subx7 - P(2,14)*subx8;
        float subx29 = P(0,15) + P(1,15)*subx7 - P(2,15)*subx8;
        float subx30 = P(0,16) + P(1,16)*subx7 - P(2,16)*subx8;
        float subx31 = P(0,17) + P(1,17)*subx7 - P(2,17)*subx8;
        float subx32 = -P(0,2)*subx7 + P(1,2) + P(2,2)*subx14;
        float subx33 = -P(0,0)*subx7 + P(0,1) + P(0,2)*subx14;
        float subx34 = P(1,2)*subx14;
        float subx35 = P(1,1) - subx11 + subx34;
        float subx36 = -subx14*subx35 + subx32 + subx33*subx8;
        float subx37 = -P(0,3)*subx7 + P(1,3) + P(2,3)*subx14;
        float subx38 = -P(0,4)*subx7 + P(1,4) + P(2,4)*subx14;
        float subx39 = -P(0,5)*subx7 + P(1,5) + P(2,5)*subx14;
        float subx40 = -P(0,6)*subx7 + P(1,6) + P(2,6)*subx14;
        float subx41 = -P(0,7)*subx7 + P(1,7) + P(2,7)*subx14;
        float subx42 = -P(0,8)*subx7 + P(1,8) + P(2,8)*subx14;
        float subx43 = -P(0,9)*subx7 + P(1,9) + P(2,9)*subx14;
        float subx44 = -P(0,10)*subx7 + P(1,10) + P(2,10)*subx14;
        float subx45 = -P(0,11)*subx7 + P(1,11) + P(2,11)*subx14;
        float subx46 = -P(0,12)*subx7 + P(1,12) + P(2,12)*subx14;
        float subx47 = -P(0,13)*subx7 + P(1,13) + P(2,13)*subx14;
        float subx48 = -P(0,14)*subx7 + P(1,14) + P(2,14)*subx14;
        float subx49 = -P(0,15)*subx7 + P(1,15) + P(2,15)*subx14;
        float subx50 = -P(0,16)*subx7 + P(1,16) + P(2,16)*subx14;
        float subx51 = -P(0,17)*subx7 + P(1,17) + P(2,17)*subx14;
        float subx52 = P(0,3)*subx8 - P(1,3)*subx14 + P(2,3);
        float subx53 = P(0,4)*subx8 - P(1,4)*subx14 + P(2,4);
        float subx54 = P(0,5)*subx8 - P(1,5)*subx14 + P(2,5);
        float subx55 = P(0,6)*subx8 - P(1,6)*subx14 + P(2,6);
        float subx56 = P(0,7)*subx8 - P(1,7)*subx14 + P(2,7);
        float subx57 = P(0,8)*subx8 - P(1,8)*subx14 + P(2,8);
        float subx58 = P(0,9)*subx8 - P(1,9)*subx14 + P(2,9);
        float subx59 = P(0,10)*subx8 - P(1,10)*subx14 + P(2,10);
        float subx60 = P(0,11)*subx8 - P(1,11)*subx14 + P(2,11);
        float subx61 = P(0,12)*subx8 - P(1,12)*subx14 + P(2,12);
        float subx62 = P(0,13)*subx8 - P(1,13)*subx14 + P(2,13);
        float subx63 = P(0,14)*subx8 - P(1,14)*subx14 + P(2,14);
        float subx64 = P(0,15)*subx8 - P(1,15)*subx14 + P(2,15);
        float subx65 = P(0,16)*subx8 - P(1,16)*subx14 + P(2,16);
        float subx66 = P(0,17)*subx8 - P(1,17)*subx14 + P(2,17);

        quat.w() = subx2 - subx3*x(STATE_IDX_ROT_ERR0) - subx4*x(STATE_IDX_ROT_ERR1) - subx5*x(STATE_IDX_ROT_ERR2);
        quat.x() = subx2*x(STATE_IDX_ROT_ERR0) + subx3 + subx4*x(STATE_IDX_ROT_ERR2) - subx5*x(STATE_IDX_ROT_ERR1);
        quat.y() = subx2*x(STATE_IDX_ROT_ERR1) - subx3*x(STATE_IDX_ROT_ERR2) + subx4 + subx5*x(STATE_IDX_ROT_ERR0);
        quat.z() = subx2*x(STATE_IDX_ROT_ERR2) + subx3*x(STATE_IDX_ROT_ERR1) - subx4*x(STATE_IDX_ROT_ERR0) + subx5;

        x(0,0) = 0;
        x(1,0) = 0;
        x(2,0) = 0;

        P(2,2) = P(2,2) + subx12 - subx14*(P(0,1)*subx8 - P(1,1)*subx14 + P(1,2)) - subx34 + subx8*(P(0,0)*subx8 - P(0,1)*subx14 + P(0,2));
        P(0,0) = -subx10*subx8 + subx13 + subx7*subx9;
        P(0,1) = subx15;
        P(0,2) = subx16;
        P(0,3) = subx17;
        P(0,4) = subx18;
        P(0,5) = subx19;
        P(0,6) = subx20;
        P(0,7) = subx21;
        P(0,8) = subx22;
        P(0,9) = subx23;
        P(0,10) = subx24;
        P(0,11) = subx25;
        P(0,12) = subx26;
        P(0,13) = subx27;
        P(0,14) = subx28;
        P(0,15) = subx29;
        P(0,16) = subx30;
        P(0,17) = subx31;
        P(1,0) = subx15;
        P(1,1) = subx14*subx32 - subx33*subx7 + subx35;
        P(1,2) = subx36;
        P(1,3) = subx37;
        P(1,4) = subx38;
        P(1,5) = subx39;
        P(1,6) = subx40;
        P(1,7) = subx41;
        P(1,8) = subx42;
        P(1,9) = subx43;
        P(1,10) = subx44;
        P(1,11) = subx45;
        P(1,12) = subx46;
        P(1,13) = subx47;
        P(1,14) = subx48;
        P(1,15) = subx49;
        P(1,16) = subx50;
        P(1,17) = subx51;
        P(2,0) = subx16;
        P(2,1) = subx36;
        P(2,3) = subx52;
        P(2,4) = subx53;
        P(2,5) = subx54;
        P(2,6) = subx55;
        P(2,7) = subx56;
        P(2,8) = subx57;
        P(2,9) = subx58;
        P(2,10) = subx59;
        P(2,11) = subx60;
        P(2,12) = subx61;
        P(2,13) = subx62;
        P(2,14) = subx63;
        P(2,15) = subx64;
        P(2,16) = subx65;
        P(2,17) = subx66;
        P(3,0) = subx17;
        P(3,1) = subx37;
        P(3,2) = subx52;
        P(4,0) = subx18;
        P(4,1) = subx38;
        P(4,2) = subx53;
        P(5,0) = subx19;
        P(5,1) = subx39;
        P(5,2) = subx54;
        P(6,0) = subx20;
        P(6,1) = subx40;
        P(6,2) = subx55;
        P(7,0) = subx21;
        P(7,1) = subx41;
        P(7,2) = subx56;
        P(8,0) = subx22;
        P(8,1) = subx42;
        P(8,2) = subx57;
        P(9,0) = subx23;
        P(9,1) = subx43;
        P(9,2) = subx58;
        P(10,0) = subx24;
        P(10,1) = subx44;
        P(10,2) = subx59;
        P(11,0) = subx25;
        P(11,1) = subx45;
        P(11,2) = subx60;
        P(12,0) = subx26;
        P(12,1) = subx46;
        P(12,2) = subx61;
        P(13,0) = subx27;
        P(13,1) = subx47;
        P(13,2) = subx62;
        P(14,0) = subx28;
        P(14,1) = subx48;
        P(14,2) = subx63;
        P(15,0) = subx29;
        P(15,1) = subx49;
        P(15,2) = subx64;
        P(16,0) = subx30;
        P(16,1) = subx50;
        P(16,2) = subx65;
        P(17,0) = subx31;
        P(17,1) = subx51;
        P(17,2) = subx66;
    } //////// End generated code: zero rotation error        ////////
}

void InertialNavigationEstimator::Mixand::stage_pos_vel_fusion(const Vector6f& posvel_obs, const Matrix6f& R) {
    fusion_result = {};

    // Construct z, h, R, and H
    const auto& z = posvel_obs;

    const auto h = x.block<6,1>(STATE_IDX_POS0,0);

    Matrix<float,6,N_STATES> H = Matrix<float,6,N_STATES>::Zero();

    for (uint8_t i=0; i<6; i++) {
        H(i,STATE_IDX_POS0+i) = 1;
    }

    const Matrix<float,6,6> S = P.block<6,6>(STATE_IDX_POS0,STATE_IDX_POS0) + R;

    auto S_solver = S.ldlt();

    if (S_solver.info() != Eigen::Success) {
        return;
    }

    const auto S_I = S_solver.solve(Matrix6f::Identity());
    float S_det = S_solver.vectorD().prod();

    if (S_det < 0) {
        return;
    }

    auto y = z-h;

    fusion_result.NIS = y.transpose()*S_I*y;
    fusion_result.pdf = exp(-0.5*(fusion_result.NIS))/sqrt(2*M_PI*S_det);

    if (fusion_result.NIS < 0) {
        return;
    }

    Matrix<float,18,6> K;
    K.noalias() = P.selfadjointView<Eigen::Upper>()*H.transpose()*S_I;

    x_n.noalias() = x+K*y;

    P_n.noalias() = (MatrixSxS::Identity()-K*H)*P;
    quat_n.coeffs().noalias() = quat.coeffs();

    for (uint8_t i=0; i<N_STATES; i++) {
        if (P_n(i,i) < 0) {
            return;
        }
    }

    zero_rot_err_inplace(x_n, P_n, quat_n);

    fusion_result.success = true;
}

